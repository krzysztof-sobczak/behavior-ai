input {
    file {
        path => "/data/logs/**/*.log"
        type => "elb"
        start_position => "beginning"
        sincedb_path => "log_sincedb"
        ignore_older => "86400000"
    }
    http {
        "type" => "http"
        "response_headers" => {
            "Access-Control-Allow-Origin" => "*"
            "Access-Control-Allow-Methods" => "PUT"
            "Access-Control-Allow-Headers" => "content-type"
        }
    }
}
filter {
    if [type] == "elb" {
        grok {
            match => [ "message", "%{ELB_ACCESS_LOG} %{QS:agent}" ]
            remove_field => [ "message","host","type","elb","clientport","backendip","backendport","request_processing_time","backend_processing_time","response_processing_time","backend_response","received_bytes","bytes","request","proto","urihost","port","httpversion" ]
        }
    }

    if [headers][request_method] == "OPTIONS" {
        drop {}
    }

    mutate {
        remove_field => [ "headers" ]
    }

    grok {
        patterns_dir => "/data/logstash/patterns"
        match => { "agent" => "%{WEBCRAWLER}" }
        add_tag => "webcrawler"
    }

    grok {
        patterns_dir => "/data/logstash/patterns"
        match => { "agent" => "%{HEALTHCHECK}" }
        add_tag => "healthcheck"
    }

    if "webcrawler" in [tags] or "healthcheck" in [tags] {
       drop { }
    }

    date {
        match => [ "timestamp", "ISO8601" ]
    }

    ## ADDITIONAL CONFIGS
